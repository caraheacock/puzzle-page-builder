/*--------------------*/
/* Puzzle Grid System */
/*--------------------*/

/*
 * Our custom grid system generates utility classes. Currently it is a 12 column
 * grid but has the potential to have other column numbers.
 *
 * These classes work similarly to frameworks such as Bootstrap and Foundation.
 * Classes contain the size they take effect and how many columns they span across
 * or push left and right. Sizes currently include "xs" (extra small, which works at all
 * sizes), "sm" (small), "md" (medium), "lg" (large), and "xl" (extra large).
 * We use variables set in the _variables partial for what exactly these sizes are.
 *
 * To use these classes, with the except of classes for hiding and showing, divs MUST
 * have the class ".col" and be direct children of a div with the class ".pz-row".
 * The .pz-row container is a flex container, and the .col divs inside employ flexbox to
 * change size.
 *
 * The most basic usage of the grid system is to determine how wide a div will be
 * at certain widths. For example, .xs-12 means the affected div will be full width.
 * .xs-6 means the affected div will be 6 columns wide, or half width.
 *
 * A .col with the chained classes .xs-12.md-4 will be full width to start,
 * and shrink to 4 columns wide (one third width) at the medium size.
 *
 * A .col with the chained classes .xs-6.xl-8 will be 6 columns to start, and
 * will .pz-row to 8 columns wide at the extra large width.
 *
 * It is also important to note that these classes are meant to be used mobile-first,
 * which is why "xs" is the start size and can be overridden as the screen becomes
 * larger.
 *
 * We also have classes for pushing. .sm-left-2 means there are 2 empty columns to the
 * left of the .col at the small size (pushing the .col itself to the right).
 * .lg-right4 means there are 4 empty columns to the right of the affected div at the
 * large size, which will push over any content immediately following.
 *
 * If you only have one .col in a .pz-row, you can use the center and uncenter classes.
 * .sm-center means the div will be centered at the small width.
 * A div with the chained classes .xs-center.lg-uncenter means the div will be centered
 * at the beginning but will uncenter (align left) at the large width.
 *
 * You can use the fill class to have a .col fill the remaining space. This is handy if
 * you want a .col to fill the remaining space in a.pz-row regardless of the size of other
 * elements.
 * .xs-fill means the .col will .pz-row to fill the remaining space in a .pz-row.
 * A .col with the chainined classes .xs-fill.lg-unfill means the div will fill the
 * remaining space to start, and will revert to its automatic size at the large width.
 *
 * We have utility classes for hiding and showing, which do NOT have to be
 * used strictly on divs with the class ".col".
 * An element with the classes .xs-hide.lg-show will be hidden to start and will appear
 * at the large width.
 *
 * Lastly, there is a utility class called .col-inner which is added as needed for inner
 * margin/padding. Margin/padding is not directly applied to .col divs (except left and
 * right pushes) to allow us to nest.pz-rows and columns within.pz-rows and columns if needed,
 * without chaining the effects of margin and padding.
 */

$col_num: 12;
$miscellaneous_widths: (
    one-eighth: $col_num / 8,
    three-eighths: $col_num / 8 * 3,
    five-eighths: $col_num / 8 * 5,
    seven-eighths: $col_num / 8 * 7,
    one-fifth: $col_num / 5,
    two-fifths: $col_num / 5 * 2,
    three-fifths: $col_num / 5 * 3,
    four-fifths: $col_num / 5 * 4
);

@mixin make_columns($size) {
    @for $i from 1 through $col_num {
        .column.#{$size}-#{$i} {
            @include flex-basis(100% / $col_num * $i);
            width: 100% / $col_num * $i;
        }
    }

    @for $i from 0 to $col_num {
        .column {
            &.#{$size}-left-#{$i} {
                margin-left: 100% / $col_num * $i;
            }

            &.#{$size}-right-#{$i} {
                margin-right: 100% / $col_num * $i;
            }
        }
    }

    @each $name, $value in $miscellaneous_widths {
        .column {
            &.#{$size}-#{$name} {
                @include flex-basis(100% / $col_num * $value);
                width: 100% / $col_num * $value;
            }
    
            &.#{$size}-left-#{$name} {
                margin-left: 100% / $col_num * $value;
            }
    
            &.#{$size}-right-#{$name} {
                margin-right: 100% / $col_num * $value;
            }
        }
    }
    
    .column {
        &.#{$size}-center {
            margin: 0 auto;
        }
        
        &.#{$size}-uncenter {
            margin: 0;
        }
        
        &.#{$size}-fill {
            @include flex-grow(1);
        }
        
        &.#{$size}-unfill {
            @include flex-grow(0);
        }
    }
    
    .#{$size}-show {
        display: block;
    }
    
    .#{$prefix}row.#{$size}-show {
        @include display-flex;
    }
    
    span.#{$size}-show {
        display: inline;
    }
    
    .#{$size}-hide {
        display: none;
    }
}

.#{$prefix}row {
    @include display-flex;
    @include flex-wrap(wrap);
    max-width: $max-width;
    margin: 0 auto;
}

.column {
    @include flex(0 1 auto);
    min-width: 0;
}

.col-inner {
    position: relative;
    width: calc(100% - #{$space-unit / 3});
    margin: $space-unit / 6;
    padding: 10px;
    
    @include breakpoint($size-md) {
        padding: 15px;
    }
}

@include make_columns(xs);

@include breakpoint($size-sm) {
    @include make_columns(sm);
}

@include breakpoint($size-md) {
    @include make_columns(md);
}

@include breakpoint($size-lg) {
    @include make_columns(lg);
}

@include breakpoint($size-xl) {
    @include make_columns(xl);
}